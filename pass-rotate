#!/usr/bin/env python3
"""pass-rotate

Usage:
  pass-rotate <accounts>...
  pass-rotate --list-accounts
  pass-rotate --list-providers
  pass-rotate --list-options <provider>

Options:
  --list-accounts   Print all configured accounts
  --list-providers  Print all supported service providers and exit
  --list-options    Prints options for the specified provider and exit
  --config=<file>   Specify an alternate config file (default: ~/.config/pass-rotate.ini)
"""

from passrotate import PassRotate
from configparser import ConfigParser
from docopt import docopt
import traceback
import subprocess
import sys
import os
from getpass import getpass
import json

args = docopt(__doc__, version='pass-rotate 1.0')

pass_rotate = PassRotate()

if args["--list-providers"]:
    providers = sorted(pass_rotate.get_providers(), key=lambda p: p.name)
    print("{:<24} {:<24}\n".format("Domain", "Provider"))
    for p in providers:
        for d in p.domains:
            print("{:<24} {:<24}".format(d, p.name))
    sys.exit()

if args["--list-options"]:
    provider = pass_rotate.get_provider_class(args["<provider>"])
    if not provider:
        print("Unknown provider")
        sys.exit(1)
    print(provider.name)
    print("\nDomains:")
    for d in provider.domains:
        print("    {}".format(d))
    print("\nUsage:")
    if provider.__doc__.startswith("\n"):
        print(provider.__doc__[1:].rstrip())
    else:
        print(provider.__doc__.rstrip())
    sys.exit()

if os.environ.get("XDG_CONFIG_HOME"):
    xdg_config_location = os.path.join(os.environ.get("XDG_CONFIG_HOME"), "pass-rotate.ini")
else:
    xdg_config_location = None
cfg_path = args.get("--config") or xdg_config_location or os.path.expanduser("~/.config/pass-rotate.ini")
try:
    with open(cfg_path) as f:
        config = ConfigParser()
        config.readfp(f)
except Exception as ex:
    sys.stderr.write(str(ex))
    sys.stderr.write("\nFailed to read config file.\n")
    sys.exit(1)

if args["--list-accounts"]:
    accounts = sorted([
        s for s in config.sections() \
            if s != "pass-rotate" and pass_rotate.get_provider_class(config[s].get("domain") or s)
        ])
    [print(a) for a in accounts]
    sys.exit()

_lookup_account_cmd = config["pass-rotate"].get("get-account")
_lookup_password_cmd = config["pass-rotate"].get("get-password")
_set_password_cmd = config["pass-rotate"].get("set-password")
_gen_password_cmd = config["pass-rotate"]["gen-password"]

_gen_sets_password = _set_password_cmd == None

if not _lookup_account_cmd and not _lookup_password_cmd:
    raise Exception('pass-rotate.get-account config must be set')


def lookup_account(account_name):
    env = os.environ
    env.update({
        "ACCOUNT": account_name,
        "PATH": env["PATH"] + ":" + os.path.dirname(__file__)
    })
    subp = subprocess.run([_lookup_account_cmd],
        shell=True, env=env,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    if subp.returncode != 0:
        raise Exception(
            "lookup_account command exited with nonzero status code:\n" +
            subp.stdout.decode())

    cfg = json.loads(subp.stdout.decode())
    password = cfg.pop('password')

    return (password, cfg)

def lookup_password(account):
    env = os.environ
    env.update({ "ACCOUNT": account })
    subp = subprocess.run([_lookup_password_cmd],
            shell=True, env=env,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if subp.returncode != 0:
        raise Exception("lookup_password command exited with nonzero status code")
    return subp.stdout.decode().strip()

def set_password(account, new_password):
    env = os.environ
    env.update({ "ACCOUNT": account })
    subp = subprocess.run([_set_password_cmd],
            shell=True, env=env,
            input=new_password.encode(),
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if subp.returncode != 0:
        raise Exception("set_password command exited with nonzero status code")
    return subp.stdout.decode().strip()

def gen_password(account):
    env = os.environ
    env.update({ "ACCOUNT": account })
    subp = subprocess.run([_gen_password_cmd],
            shell=True, env=env,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if subp.returncode != 0:
        raise Exception("gen_password command exited with nonzero status code")

    if _gen_sets_password:
        return get_account(account)['password']
    else:
        return subp.stdout.decode()

def get_account(account_name):
    cfg = config[account_name] or {}

    if _lookup_account_cmd:
        password, account_cfg = lookup_account(account_name)
    else:
        if not config.has_section(account_name):
            raise Exception("Error: No account configured for {}".format(account_name))

        password = lookup_password(account_name)
        account_cfg = {}

    account = {
        "name": account_name,
        "password": password,
        "config": { **cfg, **account_cfg }  # TODO - Limit keys?
    }

    if 'username' not in account['config']:
        raise Exception(
            "username is not set in account {}".format(account["name"]))

    return account

def custom_prompt(prompt, prompt_type):
    return getpass(prompt="\n  " + prompt + ": ")

pass_rotate.set_prompt(custom_prompt)

errs = 0
for account_name in args.get("<accounts>"):
    try:
        account = get_account(account_name)
    except Exception as e:
        raise e
        print(e)  # TODO
        errs += 1
        continue

    domain = account.get("domain", account_name)
    pass_name = account.get("pass-name", account_name)

    provider = pass_rotate.get_provider(domain, account['config'])
    if not provider:
        raise Exception(
            "Error: pass-rotate does not have a service provider for {}".format(domain))

    sys.stderr.write("Rotating {}... ".format(pass_name))
    sys.stderr.flush()
    try:
        old_password = account['password']
        provider.prepare(old_password)
        new_password = gen_password(pass_name)
        provider.execute(old_password, new_password)
        if not _gen_sets_password:
            set_password(account_name, new_password)
        sys.stderr.write("OK\n")
    except:
        sys.stderr.write("FAIL\n")
        sys.stderr.write(traceback.format_exc())
        sys.stderr.write("\nFailed to rotate {}\n".format(account_name))
        errs += 1
    sys.stderr.flush()
sys.exit(errs)
